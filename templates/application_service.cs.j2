using Application.Interfaces;
using Core.Entities;
using Core.Interfaces;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace Application.Services
{
    /// <summary>
    /// Service implementation for {{ TableNamePascal }} operations
    /// </summary>
    public class {{ TableNamePascal }}Service : I{{ TableNamePascal }}Service
    {
        private readonly I{{ TableNamePascal }}Repository _repository;

        public {{ TableNamePascal }}Service(I{{ TableNamePascal }}Repository repository)
        {
            _repository = repository ?? throw new ArgumentNullException(nameof(repository));
        }

        /// <inheritdoc />
        public async Task<{{ TableNamePascal }}?> GetByIdAsync({{ PrimaryKey.CSharpType }} id)
        {
            if (id == default({{ PrimaryKey.CSharpType }}))
                throw new ArgumentException("ID cannot be default value", nameof(id));

            return await _repository.GetByIdAsync(id);
        }

        /// <inheritdoc />
        public async Task<IEnumerable<{{ TableNamePascal }}>> GetAllAsync()
        {
            return await _repository.GetAllAsync();
        }

        /// <inheritdoc />
        public async Task<{{ TableNamePascal }}> CreateAsync({{ TableNamePascal }} entity)
        {
            if (entity == null)
                throw new ArgumentNullException(nameof(entity));

            // Add business validation here
            ValidateEntity(entity);

            await _repository.AddAsync(entity);
            return entity;
        }

        /// <inheritdoc />
        public async Task UpdateAsync({{ TableNamePascal }} entity)
        {
            if (entity == null)
                throw new ArgumentNullException(nameof(entity));

            if (entity.{{ PrimaryKey.NamePascal }} == default({{ PrimaryKey.CSharpType }}))
                throw new ArgumentException("Entity ID cannot be default value", nameof(entity));

            // Check if entity exists
            var exists = await ExistsAsync(entity.{{ PrimaryKey.NamePascal }});
            if (!exists)
                throw new InvalidOperationException($"{{ TableNamePascal }} with ID {entity.{{ PrimaryKey.NamePascal }}} not found");

            // Add business validation here
            ValidateEntity(entity);

            await _repository.UpdateAsync(entity);
        }

        /// <inheritdoc />
        public async Task DeleteAsync({{ PrimaryKey.CSharpType }} id)
        {
            if (id == default({{ PrimaryKey.CSharpType }}))
                throw new ArgumentException("ID cannot be default value", nameof(id));

            // Check if entity exists
            var exists = await ExistsAsync(id);
            if (!exists)
                throw new InvalidOperationException($"{{ TableNamePascal }} with ID {id} not found");

            // Add business rules for deletion here (e.g., check for dependencies)

            await _repository.DeleteAsync(id);
        }

        /// <inheritdoc />
        public async Task<bool> ExistsAsync({{ PrimaryKey.CSharpType }} id)
        {
            if (id == default({{ PrimaryKey.CSharpType }}))
                return false;

            var entity = await _repository.GetByIdAsync(id);
            return entity != null;
        }

        /// <summary>
        /// Validates the entity according to business rules
        /// </summary>
        /// <param name="entity">Entity to validate</param>
        /// <exception cref="ArgumentException">Thrown when validation fails</exception>
        private void ValidateEntity({{ TableNamePascal }} entity)
        {
            // Add your business validation rules here
            // Examples:
            {% for col in NonPrimaryColumns %}
            {% if col.CSharpType == 'string' and not col.IsNullable %}
            // if (string.IsNullOrWhiteSpace(entity.{{ col.NamePascal }}))
            //     throw new ArgumentException("{{ col.NamePascal }} is required", nameof(entity));
            {% endif %}
            {% if col.CSharpType == 'string' %}
            // if (!string.IsNullOrEmpty(entity.{{ col.NamePascal }}) && entity.{{ col.NamePascal }}.Length > 255)
            //     throw new ArgumentException("{{ col.NamePascal }} cannot exceed 255 characters", nameof(entity));
            {% endif %}
            {% endfor %}
        }
    }
}