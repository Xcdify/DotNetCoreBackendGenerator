using Core.Entities{{ GroupNamespace }};
using Core.Interfaces{{ GroupNamespace }};
using Dapper;
using Npgsql;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Infrastructure.Data{{ GroupNamespace }}
{
    public class {{ TableNamePascal }}Repository : I{{ TableNamePascal }}Repository
    {
        private readonly string _connectionString;

        public {{ TableNamePascal }}Repository(string connectionString)
        {
            _connectionString = connectionString;
        }

        public async Task<{{ TableNamePascal }}?> GetByIdAsync({{ PrimaryKey.CSharpType }} id)
        {
            using var connection = new NpgsqlConnection(_connectionString);
            return await connection.QueryFirstOrDefaultAsync<{{ TableNamePascal }}>(
                $"SELECT * FROM {{ TableNameSnake }} WHERE {{ PrimaryKey.NameSnake }} = @id", 
                new { id });
        }

        public async Task<IEnumerable<{{ TableNamePascal }}>> GetAllAsync()
        {
            using var connection = new NpgsqlConnection(_connectionString);
            return await connection.QueryAsync<{{ TableNamePascal }}>(
                $"SELECT * FROM {{ TableNameSnake }}");
        }

        public async Task<(IEnumerable<{{ TableNamePascal }}> Items, int TotalCount)> GetPagedAsync(
            int pageNumber, 
            int pageSize, 
            string? searchTerm = null,
            string? sortBy = null,
            bool sortDescending = false,
            Dictionary<string, object>? filters = null)
        {
            using var connection = new NpgsqlConnection(_connectionString);
            var parameters = new DynamicParameters();
            var whereClause = new StringBuilder(" WHERE 1=1");
            
            // Add search term filter (searches across text columns)
            if (!string.IsNullOrWhiteSpace(searchTerm))
            {
                var searchClauses = new List<string>();
                {% for col in Columns %}
                {% if col.DataType in ['text', 'varchar', 'character varying', 'char', 'character'] %}
                searchClauses.Add("{{ col.NameSnake }}::text ILIKE @searchTerm");
                {% endif %}
                {% endfor %}
                
                // Only add search clause if there are text columns to search
                if (searchClauses.Any())
                {
                    whereClause.Append(" AND (");
                    whereClause.Append(string.Join(" OR ", searchClauses));
                    whereClause.Append(")");
                    parameters.Add("searchTerm", $"%{searchTerm}%");
                }
            }
            
            // Add dynamic filters
            if (filters != null && filters.Any())
            {
                foreach (var filter in filters)
                {
                    if (filter.Value != null)
                    {
                        whereClause.Append($" AND {filter.Key} = @{filter.Key}");
                        parameters.Add(filter.Key, filter.Value);
                    }
                }
            }
            
            // Determine sort column (default to primary key if not specified)
            var sortColumn = !string.IsNullOrWhiteSpace(sortBy) ? sortBy : "{{ PrimaryKey.NameSnake }}";
            var sortDirection = sortDescending ? "DESC" : "ASC";
            
            // Calculate offset
            var offset = (pageNumber - 1) * pageSize;
            parameters.Add("offset", offset);
            parameters.Add("limit", pageSize);
            
            // Build queries
            var dataQuery = $@"
                SELECT * FROM {{ TableNameSnake }}
                {whereClause}
                ORDER BY {sortColumn} {sortDirection}
                LIMIT @limit OFFSET @offset";
            
            var countQuery = $@"
                SELECT COUNT(*) FROM {{ TableNameSnake }}
                {whereClause}";
            
            // Execute both queries
            using var multi = await connection.QueryMultipleAsync(
                dataQuery + ";" + countQuery, 
                parameters);
            
            var items = await multi.ReadAsync<{{ TableNamePascal }}>();
            var totalCount = await multi.ReadSingleAsync<int>();
            
            return (items, totalCount);
        }

        public async Task<{{ TableNamePascal }}> AddAsync({{ TableNamePascal }} entity)
        {
            using var connection = new NpgsqlConnection(_connectionString);
            var sql = @"INSERT INTO {{ TableNameSnake }} 
                ({% for col in NonPrimaryColumns %}{{ col.NameSnake }}{% if not loop.last %}, {% endif %}{% endfor %})
                VALUES
                ({% for col in NonPrimaryColumns %}@{{ col.NamePascal }}{% if not loop.last %}, {% endif %}{% endfor %})
                RETURNING *";
            
            var createdEntity = await connection.QuerySingleAsync<{{ TableNamePascal }}>(sql, entity);
            return createdEntity;
        }

        public async Task UpdateAsync({{ TableNamePascal }} entity)
        {
            using var connection = new NpgsqlConnection(_connectionString);
            var sql = @"UPDATE {{ TableNameSnake }} SET
                {% for col in NonPrimaryColumns %}{{ col.NameSnake }} = @{{ col.NamePascal }}{% if not loop.last %},
                {% endif %}{% endfor %}
                WHERE {{ PrimaryKey.NameSnake }} = @{{ PrimaryKey.NamePascal }}";
            await connection.ExecuteAsync(sql, entity);
        }

        public async Task DeleteAsync({{ PrimaryKey.CSharpType }} id)
        {
            using var connection = new NpgsqlConnection(_connectionString);
            await connection.ExecuteAsync(
                $"DELETE FROM {{ TableNameSnake }} WHERE {{ PrimaryKey.NameSnake }} = @id", 
                new { id });
        }
    }
}